#include <stdio.h>
#include <string.h>

#define MAX 100

typedef struct {
    char name[MAX];
    char files[MAX][MAX];
    int fileCount;
} Directory;

Directory directories[MAX];
int dirCount = 0;

void createDirectory() {
    char dname[MAX];
    printf("Enter the directory name: ");
    scanf("%s", dname);

    // Check if the directory already exists
    for (int i = 0; i < dirCount; i++) {
        if (strcmp(directories[i].name, dname) == 0) {
            printf("The directory already exists.\n");
            return;
        }
    }

    // Create the new directory
    strcpy(directories[dirCount].name, dname);
    directories[dirCount].fileCount = 0;
    dirCount++;
    printf("Directory '%s' created successfully.\n", dname);
}

void createFile() {
    char dname[MAX], fname[MAX];
    printf("Enter the directory name to create the file in: ");
    scanf("%s", dname);

    // Find the directory
    int dirIndex = -1;
    for (int i = 0; i < dirCount; i++) {
        if (strcmp(directories[i].name, dname) == 0) {
            dirIndex = i;
            break;
        }
    }

    if (dirIndex == -1) {
        printf("Directory not found.\n");
        return;
    }

    printf("Enter the file name: ");
    scanf("%s", fname);

    // Check if the file already exists in the directory
    for (int i = 0; i < directories[dirIndex].fileCount; i++) {
        if (strcmp(directories[dirIndex].files[i], fname) == 0) {
            printf("The file already exists in this directory.\n");
            return;
        }
    }

    // Create the new file
    strcpy(directories[dirIndex].files[directories[dirIndex].fileCount], fname);
    directories[dirIndex].fileCount++;
    printf("File '%s' created successfully in directory '%s'.\n", fname, dname);
}

void deleteFile() {
    char dname[MAX], fname[MAX];
    printf("Enter the directory name to delete the file from: ");
    scanf("%s", dname);

    // Find the directory
    int dirIndex = -1;
    for (int i = 0; i < dirCount; i++) {
        if (strcmp(directories[i].name, dname) == 0) {
            dirIndex = i;
            break;
        }
    }

    if (dirIndex == -1) {
        printf("Directory not found.\n");
        return;
    }

    printf("Enter the file name to delete: ");
    scanf("%s", fname);

    // Find and delete the file
    int found = 0;
    for (int i = 0; i < directories[dirIndex].fileCount; i++) {
        if (strcmp(directories[dirIndex].files[i], fname) == 0) {
            found = 1;
            for (int j = i; j < directories[dirIndex].fileCount - 1; j++) {
                strcpy(directories[dirIndex].files[j], directories[dirIndex].files[j + 1]);
            }
            directories[dirIndex].fileCount--;
            printf("File '%s' deleted successfully from directory '%s'.\n", fname, dname);
            return;
        }
    }

    if (!found) {
        printf("File not found in the specified directory.\n");
    }
}

void deleteDirectory() {
    char dname[MAX];
    printf("Enter the directory name to delete: ");
    scanf("%s", dname);

    // Find the directory
    int dirIndex = -1;
    for (int i = 0; i < dirCount; i++) {
        if (strcmp(directories[i].name, dname) == 0) {
            dirIndex = i;
            break;
        }
    }

    if (dirIndex == -1) {
        printf("Directory not found.\n");
        return;
    }

    // Check if the directory is empty
    if (directories[dirIndex].fileCount > 0) {
        printf("Cannot delete directory '%s' because it contains files.\n", dname);
        return;
    }

    // Delete the directory
    for (int i = dirIndex; i < dirCount - 1; i++) {
        directories[i] = directories[i + 1];
    }
    dirCount--;
    printf("Directory '%s' deleted successfully.\n", dname);
}

void displayFiles() {
    printf("Displaying all directories and their files:\n");
    for (int i = 0; i < dirCount; i++) {
        printf("Directory: %s\n", directories[i].name);
        for (int j = 0; j < directories[i].fileCount; j++) {
            printf("  File: %s\n", directories[i].files[j]);
        }
    }
}

void searchFile() {
    char fname[MAX];
    printf("Enter the file name to search: ");
    scanf("%s", fname);

    int found = 0;
    for (int i = 0; i < dirCount; i++) {
        for (int j = 0; j < directories[i].fileCount; j++) {
            if (strcmp(directories[i].files[j], fname) == 0) {
                printf("File '%s' found in directory '%s'.\n", fname, directories[i].name);
                found = 1;
            }
        }
    }

    if (!found) {
        printf("File not found.\n");
    }
}

int main() {
    int ch = 0;
    while (ch != 7) {
        printf("\nMenu:\n");
        printf(" 1: Create Directory\n");
        printf(" 2: Create File\n");
        printf(" 3: Delete File\n");
        printf(" 4: Delete Directory\n");
        printf(" 5: Display Files\n");
        printf(" 6: Search File\n");
        printf(" 7: Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &ch);

        switch (ch) {
            case 1:
                createDirectory();
                break;
            case 2:
                createFile();
                break;
            case 3:
                deleteFile();
                break;
            case 4:
                deleteDirectory();
                break;
            case 5:
                displayFiles();
                break;
            case 6:
                searchFile();
                break;
            case 7:
                printf("Exiting the program.\n");
                break;
            default:
                printf("Invalid choice. Please try again.\n");
        }
    }
    return 0;
}
